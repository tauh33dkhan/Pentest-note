import os
import subprocess
import re
pattc="(\d+)/tcp"
folder="./"


ip_list=[]

for p in ip_list:
    os.mkdir("./"+p)

function_=[]

def call_nmap(ip_addr):
    p=['nmap','-A',ip_addr]
    p_ = subprocess.Popen(p,stdout=subprocess.PIPE,stdin=subprocess.PIPE)
    ss=p_.communicate()[0]
    #write to files
    fs=open("./"+ip_addr+"/"+ip_addr+"_nmap_full","w")
    fs.write(ss)
    fs.close()
    p_.stdin.close()
    port_num=re.findall(pattc,ss)
    for i in range(len(port_num)):
        port_num[i]=int(port_num[i])
    return port_num

def call_nmap_udp(ip_addr):
    p=['nmap','-sU',ip_addr]
    p_ = subprocess.Popen(p,stdout=subprocess.PIPE,stdin=subprocess.PIPE)
    ss=p_.communicate()[0]
    #write to files
    fs=open("./"+ip_addr+"/"+ip_addr+"_nmap_results_udp","w")
    fs.write(ss)
    fs.close()
    p_.stdin.close()



def call_nmap_os_enum(ip_addr):
    p=['nmap','-O','-sV',ip_addr]
    p_ = subprocess.Popen(p,stdout=subprocess.PIPE,stdin=subprocess.PIPE)
    ss=p_.communicate()[0]
    #write to files
    fs=open("./"+ip_addr+"/"+ip_addr+"_nmap_os","w")
    fs.write(ss)
    fs.close()
    p_.stdin.close()
    #flag 1 == ms else linux
    flag=0
    if "Windows" in ss or "microsoft-ds" in ss or "Microsoft Windows" in ss:
    	flag=1
    return flag


#port 80  443,8080,8000
def call_nikto(link,port):
    ip_addr=link
    if port !=80:
        link+=":"+str(port)
    p=['nikto','-h',link]
    p_ = subprocess.Popen(p,stdout=subprocess.PIPE,stdin=subprocess.PIPE)
    ss=p_.communicate()[0]
    #write to files
    fs=open("./"+ip_addr+"/"+ip_addr+"_"+str(port)+"_nikto","w")
    fs.write(ss)
    fs.close()
    p_.stdin.close()



#gobuster -e -u http://192.168.0.155/ -w /usr/share/wordlists/dirb/big.txt
def call_gobuster(ip_addr,port):
    if port==80:
        link="http://"+ip_addr+"/"
    elif port == 443:
        link="https://"+ip_addr+"/"
    else:
        link="http://"+ip_addr+":"+str(port)+"/"
    p=['gobuster','-e','-u',link,'-w','/usr/share/wordlists/dirb/big.txt']
    p_ = subprocess.Popen(p,stdout=subprocess.PIPE,stdin=subprocess.PIPE)
    ss=p_.communicate()[0]
    #write to files
    fs=open("./"+ip_addr+"/"+ip_addr+"_"+str(port)+"_gobuster","w")
    fs.write(ss)
    fs.close()
    p_.stdin.close()


# 139 445
def call_enum4linux(ip_addr):
    p=['enum4linux',ip_addr]
    p_ = subprocess.Popen(p,stdout=subprocess.PIPE,stdin=subprocess.PIPE)
    ss=p_.communicate()[0]
    #write to files
    fs=open("./"+ip_addr+"/"+ip_addr+"_enum4linux","w")
    fs.write(ss)
    fs.close()
    p_.stdin.close()


for ip in ip_list:
    #normal full port scan
    print "[+] Doing full port scan on "+ip
    ss=call_nmap(ip)
    function_.append(ss)
    call_nmap_os_enum(ip)


#enum service
for i in range(len(ip_list)):
    items = function_[i]

    if 139 in items or 445 in items:
        call_enum4linux(ip_list[i])

    if 80 in items:
        call_nikto(ip_list[i],80)
        call_gobuster(ip_list[i],80)
  
    if 443 in items:
        call_nikto(ip_list[i],443)
        call_gobuster(ip_list[i],443)
    if 8000 in items:
        call_nikto(ip_list[i],8000)
        call_gobuster(ip_list[i],8000)
    if 8080 in items:
        call_nikto(ip_list[i],8080)
        call_gobuster(ip_list[i],8080)


#do udp at last stage
 for ip in ip_list:
     #normal full port scan
     call_nmap_udp(ip)
